<?php

namespace DoctrineORMModule\Proxy\__CG__\Application\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Plugin extends \Application\Entity\Plugin implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Application\\Entity\\Plugin' . "\0" . '_dataLoader', 'tmpVersions', 'id', 'name', 'artifactid', 'groupid', 'description', 'short_description', 'license', 'author', 'added_at', 'last_updated_at', 'approved_at', 'url', 'status', 'latest_version', 'release_version', 'image', 'homepage', 'downloads', 'versions', 'categories'];
        }

        return ['__isInitialized__', '' . "\0" . 'Application\\Entity\\Plugin' . "\0" . '_dataLoader', 'tmpVersions', 'id', 'name', 'artifactid', 'groupid', 'description', 'short_description', 'license', 'author', 'added_at', 'last_updated_at', 'approved_at', 'url', 'status', 'latest_version', 'release_version', 'image', 'homepage', 'downloads', 'versions', 'categories'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Plugin $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setDataLoader($dl)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDataLoader', [$dl]);

        return parent::setDataLoader($dl);
    }

    /**
     * {@inheritDoc}
     */
    public function reloadData()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'reloadData', []);

        return parent::reloadData();
    }

    /**
     * {@inheritDoc}
     */
    public function loadData()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'loadData', []);

        return parent::loadData();
    }

    /**
     * {@inheritDoc}
     */
    public function addVersion($version)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addVersion', [$version]);

        return parent::addVersion($version);
    }

    /**
     * {@inheritDoc}
     */
    public function addCategory($category)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addCategory', [$category]);

        return parent::addCategory($category);
    }

    /**
     * {@inheritDoc}
     */
    public function removeCategories()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeCategories', []);

        return parent::removeCategories();
    }

    /**
     * {@inheritDoc}
     */
    public function getStatusIconClass()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatusIconClass', []);

        return parent::getStatusIconClass();
    }

    /**
     * {@inheritDoc}
     */
    public function getStatusTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatusTitle', []);

        return parent::getStatusTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function getAuthorName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAuthorName', []);

        return parent::getAuthorName();
    }

    /**
     * {@inheritDoc}
     */
    public function incrementDownloadCounter()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'incrementDownloadCounter', []);

        return parent::incrementDownloadCounter();
    }

    /**
     * {@inheritDoc}
     */
    public function isPublic()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isPublic', []);

        return parent::isPublic();
    }

    /**
     * {@inheritDoc}
     */
    public function isOwnedBy($userId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isOwnedBy', [$userId]);

        return parent::isOwnedBy($userId);
    }

    /**
     * {@inheritDoc}
     */
    public function setUrl($url)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUrl', [$url]);

        return parent::setUrl($url);
    }

    /**
     * {@inheritDoc}
     */
    public function getLatestVersion()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLatestVersion', []);

        return parent::getLatestVersion();
    }

    /**
     * {@inheritDoc}
     */
    public function setLatestVersion($ltv)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLatestVersion', [$ltv]);

        return parent::setLatestVersion($ltv);
    }

    /**
     * {@inheritDoc}
     */
    public function getReleaseVersion()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReleaseVersion', []);

        return parent::getReleaseVersion();
    }

    /**
     * {@inheritDoc}
     */
    public function setReleaseVersion($rv)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setReleaseVersion', [$rv]);

        return parent::setReleaseVersion($rv);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$description]);

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getShortDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getShortDescription', []);

        return parent::getShortDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setShortDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setShortDescription', [$description]);

        return parent::setShortDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getLicense()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLicense', []);

        return parent::getLicense();
    }

    /**
     * {@inheritDoc}
     */
    public function setLicense($license)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLicense', [$license]);

        return parent::setLicense($license);
    }

    /**
     * {@inheritDoc}
     */
    public function getAuthor()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAuthor', []);

        return parent::getAuthor();
    }

    /**
     * {@inheritDoc}
     */
    public function setAuthor($author)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAuthor', [$author]);

        return parent::setAuthor($author);
    }

    /**
     * {@inheritDoc}
     */
    public function getAddedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAddedAt', []);

        return parent::getAddedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setAddedAt($added_at)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAddedAt', [$added_at]);

        return parent::setAddedAt($added_at);
    }

    /**
     * {@inheritDoc}
     */
    public function getLastUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastUpdatedAt', []);

        return parent::getLastUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setLastUpdatedAt($lupat)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastUpdatedAt', [$lupat]);

        return parent::setLastUpdatedAt($lupat);
    }

    /**
     * {@inheritDoc}
     */
    public function getUrl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUrl', []);

        return parent::getUrl();
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', []);

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', [$status]);

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getArtifactId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getArtifactId', []);

        return parent::getArtifactId();
    }

    /**
     * {@inheritDoc}
     */
    public function setArtifactId($aid)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setArtifactId', [$aid]);

        return parent::setArtifactId($aid);
    }

    /**
     * {@inheritDoc}
     */
    public function getGroupId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGroupId', []);

        return parent::getGroupId();
    }

    /**
     * {@inheritDoc}
     */
    public function setGroupId($gid)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setGroupId', [$gid]);

        return parent::setGroupId($gid);
    }

    /**
     * {@inheritDoc}
     */
    public function getVersions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVersions', []);

        return parent::getVersions();
    }

    /**
     * {@inheritDoc}
     */
    public function getCategories()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategories', []);

        return parent::getCategories();
    }

    /**
     * {@inheritDoc}
     */
    public function setImage($im)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setImage', [$im]);

        return parent::setImage($im);
    }

    /**
     * {@inheritDoc}
     */
    public function getImage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImage', []);

        return parent::getImage();
    }

    /**
     * {@inheritDoc}
     */
    public function getHomepage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHomepage', []);

        return parent::getHomepage();
    }

    /**
     * {@inheritDoc}
     */
    public function setHomepage($hp)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHomepage', [$hp]);

        return parent::setHomepage($hp);
    }

    /**
     * {@inheritDoc}
     */
    public function getDownloads()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDownloads', []);

        return parent::getDownloads();
    }

    /**
     * {@inheritDoc}
     */
    public function setDownloads($dl)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDownloads', [$dl]);

        return parent::setDownloads($dl);
    }

    /**
     * {@inheritDoc}
     */
    public function getApprovedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getApprovedAt', []);

        return parent::getApprovedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setApprovedAt($approved_at)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setApprovedAt', [$approved_at]);

        return parent::setApprovedAt($approved_at);
    }

}
